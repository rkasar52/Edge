ISR2_a = rsqr(predTrain, train$Wrangler.Sales)
cat("In sample R^2 is:", ISR2_a)
MAE_in_a = MAE(predTrain, train$Wrangler.Sales, nrow(train))
MAE_in_a
RMSE_in_a = RMSE(predTrain, train$Wrangler.Sales, nrow(train))
RMSE_in_a
## In Sample
modA = lm(data = train, formula = (Wrangler.Sales ~ Year + Unemployment.Rate + Wrangler.Queries + CPI.Energy + CPI.All))
##summary(modA)
predTrain = predict(modA, data = train)
ISR2_a = rsqr(predTrain, train$Wrangler.Sales)
cat("In sample R^2 is:", ISR2_a)
MAE_in_a = MAE(predTrain, train$Wrangler.Sales, nrow(train))
cat("MAE is: ", MAE_in_a)
RMSE_in_a = RMSE(predTrain, train$Wrangler.Sales, nrow(train))
cat("RMSE is : ", RMSE_in_a)
## In Sample
modA = lm(data = train, formula = (Wrangler.Sales ~ Year + Unemployment.Rate + Wrangler.Queries + CPI.Energy + CPI.All))
##summary(modA)
predTrain = predict(modA, data = train)
ISR2_a = rsqr(predTrain, train$Wrangler.Sales)
cat("In sample R^2 is:", ISR2_a)
MAE_in_a = MAE(predTrain, train$Wrangler.Sales, nrow(train))
cat(" MAE is: ", MAE_in_a)
RMSE_in_a = RMSE(predTrain, train$Wrangler.Sales, nrow(train))
cat(" RMSE is : ", RMSE_in_a)
## Out of Sample for Model A
predTest = predict(modA, newdata=test)
SSE_out = sum((predTest-test$Wrangler.Sales)^2)
SST_out = sum((mean(train$Wrangler.Sales)-test$Wrangler.Sales)^2)
OSR2_a = OSR2(predTest, test$Wrangler.Sales, train$Wrangler.Sales)
cat("Out of sample R^2 for model A is: ", OSR2_a)
OSR2_a
MAE_out_a = MAE(predTest, test$Wrangler.Sales, nrow(test))
cat(" MAE for model A is: ", MAE_out_a)
RMSE_out_a = RMSE(predTest, test$Wrangler.Sales, nrow(test))
cat(" RMSE for model A is: ",RMSE_out_a)
## Out of Sample for Model A
predTest = predict(modA, newdata=test)
SSE_out = sum((predTest-test$Wrangler.Sales)^2)
SST_out = sum((mean(train$Wrangler.Sales)-test$Wrangler.Sales)^2)
OSR2_a = OSR2(predTest, test$Wrangler.Sales, train$Wrangler.Sales)
cat("Out of sample R^2 for model A is: ", OSR2_a)
MAE_out_a = MAE(predTest, test$Wrangler.Sales, nrow(test))
cat(" MAE for model A is: ", MAE_out_a)
RMSE_out_a = RMSE(predTest, test$Wrangler.Sales, nrow(test))
cat(" RMSE for model A is: ",RMSE_out_a)
## Get rid of CPI.alll
modB = lm(data = train, formula = (Wrangler.Sales ~ Year + Unemployment.Rate + Wrangler.Queries + CPI.Energy))
predTrain = predict(modB, data = train)
ISR2_mod_b = rsqr(predTrain, train$Wrangler.Sales)
MAE_in_b = MAE(predTrain, train$Wrangler.Sales, nrow(train))
RMSE_b = RMSE(predTrain, train$Wrangler.Sales, nrow(train))
cat("The R-square, MAE, and RMSE for the insample value of Model B are as follows: ", ISR2_mod_b, MAE_in_b, RMSE_b)
## Out Sample
predTest = predict(modB, newdata=test)
OSR2_b = OSR2(predTest, test$Wrangler.Sales, train$Wrangler.Sales)
MAE_out_b = MAE(predTest, test$Wrangler.Sales, nrow(test))
RMSE_out_b = RMSE(predTest, test$Wrangler.Sales, nrow(test))
cat("The R-square, MAE, and RMSE for the insample value of Model B are as follows: ", OSR2_b, MAE_out_b, RMSE_out_b)
## Out of Sample for Model A
predTest = predict(modA, newdata=test)
OSR2_a = OSR2(predTest, test$Wrangler.Sales, train$Wrangler.Sales)
MAE_out_a = MAE(predTest, test$Wrangler.Sales, nrow(test))
RMSE_out_a = RMSE(predTest, test$Wrangler.Sales, nrow(test))
cat("The R-square, MAE, and RMSE for the out of sample values of Model A are as follows: ", OSR2_a, MAE_out_a, RMSE_out_a)
## In Sample
modA = lm(data = train, formula = (Wrangler.Sales ~ Year + Unemployment.Rate + Wrangler.Queries + CPI.Energy + CPI.All))
##summary(modA)
predTrain = predict(modA, data = train)
ISR2_a = rsqr(predTrain, train$Wrangler.Sales)
MAE_in_a = MAE(predTrain, train$Wrangler.Sales, nrow(train))
RMSE_in_a = RMSE(predTrain, train$Wrangler.Sales, nrow(train))
cat("The R-square, MAE, and RMSE for the out of sample values of Model A are as follows: ", ISR2_a, MAE_in_a, RMSE_in_a)
##
modC = lm(data = train, formula = (Wrangler.Sales ~ Year + Unemployment.Rate + Wrangler.Queries + CPI.Energy + CPI.All + Month))
predTrain = predict(modC, data = train)
ISR2_c = rsqr(predTrain, train$Wrangler.Sales)
MAE_in_c = MAE(predTrain, train$Wrangler.Sales, nrow(train))
RMSE_c = RMSE(predTrain, train$Wrangler.Sales, nrow(train))
cat("The R-square, MAE, and RMSE for the in sample values of Model C are as follows: ",ISR2_c, MAE_in_c, RMSE_c)
## Out Sample
predTest = predict(modC, newdata=test)
SSE_out = sum((predTest-test$Wrangler.Sales)^2)
SST_out = sum((mean(train$Wrangler.Sales)-test$Wrangler.Sales)^2)
OSR2 = 1-(SSE_out/SST_out)
print(OSR2)
MAE_out = sum(abs(test$Wrangler.Sales-predTest))/nrow(test)
MAE_out
RMSE_out = sqrt(sum((test$Wrangler.Sales-predTest)^2)/nrow(test))
RMSE_out
## Out Sample
predTest = predict(modC, newdata=test)
OSR2_c = OSR2(predTest, test$Wrangler.Sales, train$Wrangler.Sales)
rsqr = function(predictions, actuals){
SSE = sum((predictions-actuals)^2)
SST = sum((mean(actuals)-actuals)^2)
r2 = 1-(SSE/SST)
return(r2)
}
MAE = function(predictions, actuals, n){
total = sum(abs(actuals-predictions))/n
return(total)
}
RMSE = function(predictions, actuals, n){
total = sqrt(sum((actuals-predictions)^2)/n)
return(total)
}
OSR2 = function(predictions, actuals, actuals_train){
SSE = sum((predictions-actuals)^2)
SST = sum((mean(actuals_train)-actuals)^2)
OR2 = 1-(SSE/SST)
return(OR2)
}
## Out Sample
predTest = predict(modC, newdata=test)
OSR2_c = OSR2(predTest, test$Wrangler.Sales, train$Wrangler.Sales)
MAE_out_c = MAE(predTest, test$Wrangler.Sales, nrow(test))
RMSE_out_c = RMSE(predTest, test$Wrangler.Sales, nrow(test))
cat("The R-square, MAE, and RMSE for the out of sample value of Model B are as follows: ", OSR2_c, MAE_out_c, RMSE_out_c)
## Out Sample
predTest = predict(modC, newdata=test)
OSR2_c = OSR2(predTest, test$Wrangler.Sales, train$Wrangler.Sales)
MAE_out_c = MAE(predTest, test$Wrangler.Sales, nrow(test))
RMSE_out_c = RMSE(predTest, test$Wrangler.Sales, nrow(test))
cat("The R-square, MAE, and RMSE for the out of sample value of Model C are as follows: ", OSR2_c, MAE_out_c, RMSE_out_c)
##
modD = lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
predTrain = predict(modD, data = train)
SSE_in = sum((predTrain-train$Elantra.Sales)^2)
SST_in = sum((mean(train$Elantra.Sales)-train$Elantra.Sales)^2)
ISR2 = 1-(SSE_in/SST_in)
print(ISR2)
MAE_in = sum(abs(train$Elantra.Sales-predTrain))/nrow(train)
MAE_in
RMSE = sqrt(sum((train$Elantra.Sales-predTrain)^2)/nrow(train))
RMSE
##
modD = lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
predTrain = predict(modD, data = train)
I= OSR2(predTest, test$Wrangler.Sales, train$Wrangler.Sales)
MAE_in_d = MAE(predTest, test$Wrangler.Sales, nrow(test))
RMSE_in_d = RMSE(predTest, test$Wrangler.Sales, nrow(test))
rsqr = function(predictions, actuals){
SSE = sum((predictions-actuals)^2)
SST = sum((mean(actuals)-actuals)^2)
r2 = 1-(SSE/SST)
return(r2)
}
MAE = function(predictions, actuals, n){
total = sum(abs(actuals-predictions))/n
return(total)
}
RMSE = function(predictions, actuals, n){
total = sqrt(sum((actuals-predictions)^2)/n)
return(total)
}
OSR2 = function(predictions, actuals, actuals_train){
SSE = sum((predictions-actuals)^2)
SST = sum((mean(actuals_train)-actuals)^2)
OR2 = 1-(SSE/SST)
return(OR2)
}
##
modD = lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
predTrain = predict(modD, data = train)
I= OSR2(predTest, test$Wrangler.Sales, train$Wrangler.Sales)
MAE_in_d = MAE(predTest, test$Wrangler.Sales, nrow(test))
RMSE_in_d = RMSE(predTest, test$Wrangler.Sales, nrow(test))
cat("The R-square, MAE, and RMSE for the in sample value of Model D are as follows: ",ISR2_d, MAE_in_d, RMSE_in_d)
##
modD = lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
predTrain = predict(modD, data = train)
ISR2_d = (predTest, test$Wrangler.Sales, train$Wrangler.Sales)
##
modD = lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
predTrain = predict(modD, data = train)
ISR2_d = rsqr(predTest, test$Wrangler.Sales, train$Wrangler.Sales)
##
modD = lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
predTrain = predict(modD, data = train)
ISR2_d = rsqr(predTest, test$Elantra.Sales, train$Elantra.Sales)
##
modD = lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
predTrain = predict(modD, data = train)
ISR2_d = rsqr(predTest, test$Elantra.Sales)
MAE_in_d = MAE(predTest, test$Elantra.Sales, nrow(test))
RMSE_in_d = RMSE(predTest, test$Elantra.Sales, nrow(test))
cat("The R-square, MAE, and RMSE for the in sample value of Model D are as follows: ",ISR2_d, MAE_in_d, RMSE_in_d)
View(train)
##
modD = lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
predTrain = predict(modD, data = train)
SSE_in = sum((predTrain-train$Elantra.Sales)^2)
SST_in = sum((mean(train$Elantra.Sales)-train$Elantra.Sales)^2)
ISR2 = 1-(SSE_in/SST_in)
MAE_in = sum(abs(train$Elantra.Sales-predTrain))/nrow(train))
##
modD = lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
predTrain = predict(modD, data = train)
SSE_in = sum((predTrain-train$Elantra.Sales)^2)
SST_in = sum((mean(train$Elantra.Sales)-train$Elantra.Sales)^2)
ISR2 = 1-(SSE_in/SST_in)
MAE_in = sum(abs(train$Elantra.Sales-predTrain))/nrow(train)
RMSE_in = sqrt(sum((train$Elantra.Sales-predTrain)^2)/nrow(train))
cat("The R-square, MAE, and RMSE for the out of sample value of Model C are as follows: ", ISR2, MAE_in, RMSE_in)
## Out Sample
predTest = predict(modD, newdata=test)
SSE_out = sum((predTest-test$Elantra.Sales)^2)
SST_out = sum((mean(train$Elantra.Sales)-test$Elantra.Sales)^2)
OSR2 = 1-(SSE_out/SST_out)
MAE_out = sum(abs(test$Elantra.Sales-predTest))/nrow(test)
RMSE_out = sqrt(sum((test$Elantra.Sales-predTest)^2)/nrow(test))
cat("The R-square, MAE, and RMSE for the out of sample value of Model C are as follows: ", OSR2, MAE_out, RMSE_out)
## Out Sample
predTest = predict(modD, newdata=test)
SSE_out = sum((predTest-test$Elantra.Sales)^2)
SST_out = sum((mean(train$Elantra.Sales)-test$Elantra.Sales)^2)
OSR2 = 1-(SSE_out/SST_out)
MAE_out = sum(abs(test$Elantra.Sales-predTest))/nrow(test)
RMSE_out = sqrt(sum((test$Elantra.Sales-predTest)^2)/nrow(test))
cat("The R-square, MAE, and RMSE for the out of sample value of Model D are as follows: ", OSR2, MAE_out, RMSE_out)
##
modD = lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
predTrain = predict(modD, data = train)
SSE_in = sum((predTrain-train$Elantra.Sales)^2)
SST_in = sum((mean(train$Elantra.Sales)-train$Elantra.Sales)^2)
ISR2 = 1-(SSE_in/SST_in)
MAE_in = sum(abs(train$Elantra.Sales-predTrain))/nrow(train)
RMSE_in = sqrt(sum((train$Elantra.Sales-predTrain)^2)/nrow(train))
cat("The R-square, MAE, and RMSE for the in sample values of Model D are as follows: ", ISR2, MAE_in, RMSE_in)
with(wrangler_full, plot(wrangler_full$year, wrangler_full$Wrangler.Sales))
size(wrangler_full$Year)
nrows(wrangler_full$Year)
plot(x=wrangler_full$Year, y=wrangler_full$Wrangler.Sales, xlab="Year", ylab="Sales")
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales")
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales")
abline(modD,col='red')
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales")
abline(lm(Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales")
abline(lm(Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month), data=wrangler_full)
wrangler_full = read.csv("WranglerElantra2018.csv")
head(wrangler_full)
## Split into train test
train = subset(wrangler_full, Year < 2018)
test = subset(wrangler_full, Year == 2018)
train$Month = as.factor(train$Month)
test$Month = as.factor(test$Month)
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales")
abline(modD, data=wrangler_full)
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales")
abline(lm(Wrnagler.Sales ~ Year), data=wrangler_full)
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales")
abline(lm(Wrangler.Sales ~ Year), data=wrangler_full)
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales")
abline(lm(Elantra.Sales ~ Year), data=wrangler_full)
wrangler_full = read.csv("WranglerElantra2018.csv")
head(wrangler_full)
## Split into train test
train = subset(wrangler_full, Year < 2018)
test = subset(wrangler_full, Year == 2018)
train$Month = as.factor(train$Month)
test$Month = as.factor(test$Month)
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales")
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales")
abline(lm(wrangler_full$Elantra.Sales ~ wrangler_full$Year)
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales")
abline(lm(wrangler_full$Elantra.Sales ~ wrangler_full$Year))
plot(x=wrangler_full$Year, y=wrangler_full$Wrangler.Sales, xlab="Year", ylab="Sales")
abline(lm(wrangler_full$Wrangler.Sales ~ wrangler_full$Year))
pairs(wrangler_full)
pairs(wrangler_full)
plot(x=wrangler_full$Year, y=wrangler_full$Wrangler.Sales, xlab="Year", ylab="Sales")
abline(lm(wrangler_full$Wrangler.Sales ~ wrangler_full$Year))
plot(x=wrangler_full$Year, y=wrangler_full$Wrangler.Sales, xlab="Year", ylab="Sales of Wrangler")
abline(lm(wrangler_full$Wrangler.Sales ~ wrangler_full$Year))
plot(x=wrangler_full$Year, y=wrangler_full$Wrangler.Sales, xlab="Year", ylab="Sales of Wrangler")
abline(lm(wrangler_full$Wrangler.Sales ~ wrangler_full$Year), col ="red")
plot(x=test$Month, y=test$Elantra.Sales, xlab="Month", ylab="Sales of Elantra")
abline(lm(test$Elantra.Sales ~ test$Month), col ="red")
wrangler_full = read.csv("WranglerElantra2018.csv")
head(wrangler_full)
## Split into train test
train = subset(wrangler_full, Year < 2018)
test = subset(wrangler_full, Year == 2018)
train$Month = as.factor(train$Month)
test$Month = as.factor(test$Month)
##plot(x=test$Month, y=test$Elantra.Sales, xlab="Month", ylab="Sales of Elantra")
##abline
boxplot(Elantra.Sales~Month,data=test, main="Elantra Sales in 2018 by Month",
xlab="Month", ylab="Sales")
##plot(x=test$Month, y=test$Elantra.Sales, xlab="Month", ylab="Sales of Elantra")
##abline
plot(Elantra.Sales~Month,data=test, main="Elantra Sales in 2018 by Month",
xlab="Month", ylab="Sales")
##plot(x=test$Month, y=test$Elantra.Sales, xlab="Month", ylab="Sales of Elantra")
##abline
#plot(Elantra.Sales~Month,data=test, main="Elantra Sales in 2018 by Month",
#xlab="Month", ylab="Sales")
hist(test$Elantra.Sales, main = "Distribution of Elantra Sales in 2018", col = "red", prob = TRUE, xlab = "Elantra Sales")
##plot(x=test$Month, y=test$Elantra.Sales, xlab="Month", ylab="Sales of Elantra")
##abline
#plot(Elantra.Sales~Month,data=test, main="Elantra Sales in 2018 by Month",
#xlab="Month", ylab="Sales")
hist(test$Elantra.Sales, main = "Distribution of Elantra Sales in 2018", col = "red", prob = TRUE, xlab = "Elantra Sales")
hist(train$Elantra.Sales, main = "Distribution of Elantra Sales from 2010-2018", col = "grey", prob = TRUE, xlab = "Elantra Sales")
##plot(x=test$Month, y=test$Elantra.Sales, xlab="Month", ylab="Sales of Elantra")
##abline
#plot(Elantra.Sales~Month,data=test, main="Elantra Sales in 2018 by Month",
#xlab="Month", ylab="Sales")
hist(test$Elantra.Sales, main = "Distribution of Elantra Sales in 2018", col = "red",  xlab = "Elantra Sales")
hist(train$Elantra.Sales, main = "Distribution of Elantra Sales from 2010-2018", col = "grey", prob = TRUE, xlab = "Elantra Sales")
##plot(x=test$Month, y=test$Elantra.Sales, xlab="Month", ylab="Sales of Elantra")
##abline
#plot(Elantra.Sales~Month,data=test, main="Elantra Sales in 2018 by Month",
#xlab="Month", ylab="Sales")
#hist(test$Elantra.Sales, main = "Distribution of Elantra Sales in 2018", col = "red",  xlab = "Elantra Sales")
#hist(train$Elantra.Sales, main = "Distribution of Elantra Sales from 2010-2018", col = "grey", prob = TRUE, xlab = "Elantra Sales")
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales of Elantra")
abline(lm(wrangler_full$Elantra.Sales ~ wrangler_full$Year), col ="red")
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales of Elantra")
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales of Elantra")
install.packages('ggplot')
install.packages('ggplot2')
knitr::opts_chunk$set(echo = TRUE)
fit =  lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
train$predicted <- predict(fit)
train$residuals <- residuals(fit)
library(ggplot2)
ggplot(train, aes(x = Elantra.Queries, y = Elantra.Sales)) +
geom_segment(aes(xend = Elantra.Queries, yend = predicted), alpha = .2) +  # Lines to connect points
geom_point() +  # Points of actual values
geom_point(aes(y = predicted), shape = 1) +  # Points of predicted values
theme_bw()
##plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales of Elantra", main = "Elantra Sales by Year")
plot(x=wrangler_full$Year, y=wrangler_full$Wrangler.Sales, xlab="Year", ylab="Sales of Wrangler", main = "Wrangler Sales by Year")
fit =  lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
train$predicted <- predict(fit)
train$residuals <- residuals(fit)
library(ggplot2)
ggplot(train, aes(x = Elantra.Queries, y = Elantra.Sales)) +
geom_segment(aes(xend =  Elantra.Queries, yend = predicted), alpha = .2) +
geom_point(aes(color = residuals)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE) +
geom_point(aes(y = predicted), shape = 1) +
theme_bw()
##plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales of Elantra", main = "Elantra Sales by Year")
fit =  lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
train$predicted <- predict(fit)
train$residuals <- residuals(fit)
library(ggplot2)
ggplot(train, aes(x = Elantra.Queries, y = Elantra.Sales)) +
geom_segment(aes(xend =  Elantra.Queries, yend = predicted), alpha = .2) +
geom_point(aes(color = residuals)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = "none") +
geom_point(aes(y = predicted), shape = 1) +
theme_bw()
##plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales of Elantra", main = "Elantra Sales by Year")
fit =  lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
train$predicted <- predict(fit)
train$residuals <- residuals(fit)
library(ggplot2)
ggplot(train, aes(x = Year, y = Elantra.Sales)) +
geom_segment(aes(xend =  Elantra.Queries, yend = predicted), alpha = .2) +
geom_point(aes(color = residuals)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = "none") +
geom_point(aes(y = predicted), shape = 1) +
theme_bw()
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales of Elantra", main = "Elantra Sales by Year")
fit =  lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
train$predicted <- predict(fit)
train$residuals <- residuals(fit)
library(ggplot2)
ggplot(train, aes(x = Elantra.Queries, y = Elantra.Sales)) +
geom_segment(aes(xend =  Elantra.Queries, yend = predicted), alpha = .2) +
geom_point(aes(color = residuals)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = "none") +
geom_point(aes(y = predicted), shape = 1) +
theme_bw()
plot(x=wrangler_full$Elantra.Queries, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales of Elantra", main = "Elantra Sales by Year")
fit =  lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
train$predicted <- predict(fit)
train$residuals <- residuals(fit)
library(ggplot2)
ggplot(train, aes(x = Elantra.Queries, y = Elantra.Sales)) +
geom_segment(aes(xend =  Elantra.Queries, yend = predicted), alpha = .2) +
geom_point(aes(color = residuals)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = "none") +
geom_point(aes(y = predicted), shape = 1) +
theme_bw()
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales of Elantra", main = "Elantra Sales by Year")
fit =  lm(data = train, formula = (Elantra.Sales ~ Year + Unemployment.Rate + Elantra.Queries + CPI.Energy + CPI.All + Month))
train$predicted <- predict(fit)
train$residuals <- residuals(fit)
library(ggplot2)
ggplot(train, aes(x = Elantra.Queries, y = Elantra.Sales)) +
geom_segment(aes(xend =  Elantra.Queries, yend = predicted), alpha = .2) +
geom_point(aes(color = residuals)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = "none") +
geom_point(aes(y = predicted), shape = 1) +
ggtitle("Residual Plot of Elantra Queries vs Predicted Values") +
theme_bw()
plot(x=wrangler_full$Year, y=wrangler_full$Elantra.Sales, xlab="Year", ylab="Sales of Elantra", main = "Elantra Sales by Year")
knitr::opts_chunk$set(echo = TRUE)
train = read.csv("train_data.csv")
test = read.csv("test_data.csv")
sites = rbind(train,test)
sites.const = read.csv("site_const_data.csv")
model.1 = lm(annual.profit ~ . - store.number, data=sites)
summary(model.1)
newpred.1 = predict(model.1 , newdata=sites.const)
value <- sum(newpred.1)
R2 <- summary(model.1)$r.squared
train = read.csv("train_data.csv")
test = read.csv("test_data.csv")
sites = rbind(train,test)
sites.const = read.csv("site_const_data.csv")
model.1 = lm(annual.profit ~ . - store.number, data=sites)
summary(model.1)
newpred.1 = predict(model.1 , newdata=sites.const)
value <- sum(newpred.1)
R2 <- summary(model.1)$r.squared
View(test)
View(sites.const)
describe(sites)
str(sites)
print(value)
install.packages("sqldf")
library(sqldf)
setwd("C:/Dev/Analytics_Edge/Edge")
bikesept = read.csv("202109-bluebikes-tripdata.csv")
top10 = sqldf("Select top 10 * FROM bikesept")
top10 = sqldf('Select * FROM bikesept')
top10 = sqldf('Select * FROM bikesept limit 5')
top10
top10 = sqldf('Select start.station.id FROM bikesept limit 10')
View(bikesept)
top10 = sqldf('Select [start.station.id] FROM bikesept limit 10')
top10
top10 = sqldf('Select [start.station.name], count([start.station.id]) FROM bikesept')
top10
top10 = sqldf('Select [start.station.name], count([start.station.id]) FROM bikesept ORDER BY 2 DESC')
top10
top10 = sqldf('Select [start.station.name], count([start.station.id]) as Demand FROM bikesept ORDER BY count([start.station.id]) DESC')
top10
top10 = sqldf('Select [start.station.name], count([start.station.id]) as Demand FROM bikesept GROUP BY [start.station.name] ORDER BY count([start.station.id]) DESC')
top 10
top10
top10 = sqldf('Select [start.station.name], count([start.station.id]) as Demand FROM bikesept GROUP BY [start.station.name] ORDER BY 2 DESC')
top10
demand_by_stop_by_hour = sqldf('SELECT DATEPART(HOUR, [starttime]) as Start_Hour, count([start.station.id])
as Demand_by_Hour FROM bikesept GROUP BY DATEPART(HOUR, [starttime]) ORDER BY 2 DESC')
demand_by_stop_by_hour = sqldf('SELECT SUBSTRING([starttime], 12, 3) as Start_Hour, count([start.station.id])
as Demand_by_Hour FROM bikesept GROUP BY SUBSTRING([starttime], 12, 3) ORDER BY 2 DESC')
demand_by_stop_by_hour
demand_by_stop_by_hour = sqldf('SELECT SUBSTRING([starttime], 12, 2) as Start_Hour, count([start.station.id])
as Demand_by_Hour FROM bikesept GROUP BY SUBSTRING([starttime], 12, 3) ORDER BY 1 DESC')
demand_by_stop_by_hour
demand_by_stop_by_hour = sqldf('SELECT SUBSTRING([starttime], 12, 2) as Start_Hour, count([start.station.id])
as Demand_by_Hour FROM bikesept GROUP BY SUBSTRING([starttime], 12, 3) ORDER BY 1 ASC')
demand_by_stop_by_hour
demand_by_stop = sqldf('Select [start.station.name], SUBSTRING([starttime], 12, 2), count([start.station.id]) as Demand FROM
bikesept GROUP BY SUBSTRING([starttime], 12, 2), [start.station.name] ORDER BY 2 DESC')
demand_by_stop
demand_by_stop = sqldf('Select [start.station.name], SUBSTRING([starttime], 12, 2) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY SUBSTRING([starttime], 12, 2), [start.station.name] ORDER BY 1, 2 ASC, 3 DESC')
demand_by_stop
demand_by_stop = sqldf('Select CONCAT([start.station.name], ' ' ,SUBSTRING([starttime], 12, 2)) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY CONCAT([start.station.name], ' ', SUBSTRING([starttime], 12, 2)) ORDER BY 3 DESC')
demand_by_stop = sqldf('Select CONCAT([start.station.name], ,SUBSTRING([starttime], 12, 2)) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY CONCAT([start.station.name], ' ', SUBSTRING([starttime], 12, 2)) ORDER BY 3 DESC')
# a. Top ride times for each station
demand_by_stop = sqldf('Select CONCAT([start.station.name], SUBSTRING([starttime], 12, 2)) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY CONCAT([start.station.name], SUBSTRING([starttime], 12, 2)) ORDER BY 3 DESC')
# a. Top ride times for each station
demand_by_stop = sqldf('Select CONCATENATE([start.station.name], SUBSTRING([starttime], 12, 2)) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY CONCAT([start.station.name], SUBSTRING([starttime], 12, 2)) ORDER BY 3 DESC')
# a. Top ride times for each station
demand_by_stop = sqldf('Select [start.station.name]||SUBSTRING([starttime], 12, 2)) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY CONCAT([start.station.name], SUBSTRING([starttime], 12, 2)) ORDER BY 3 DESC')
# a. Top ride times for each station
demand_by_stop = sqldf('Select [start.station.name]||SUBSTRING([starttime], 12, 2) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY CONCAT([start.station.name], SUBSTRING([starttime], 12, 2)) ORDER BY 3 DESC')
# a. Top ride times for each station
demand_by_stop = sqldf('Select ([start.station.name]||SUBSTRING([starttime], 12, 2)) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY ([start.station.name]||SUBSTRING([starttime], 12, 2)) ORDER BY 2 DESC')
demand_by_stop
# a. Top ride times for each station
demand_by_stop = sqldf('Select TOP 10 ([start.station.name]||'-'||SUBSTRING([starttime], 12, 2)) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY ([start.station.name]||'-'||SUBSTRING([starttime], 12, 2)) ORDER BY 2 DESC')
# a. Top ride times for each station
demand_by_stop = sqldf('Select TOP 10 ([start.station.name]||' '||SUBSTRING([starttime], 12, 2)) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY ([start.station.name]||' '||SUBSTRING([starttime], 12, 2)) ORDER BY 2 DESC')
# a. Top ride times for each station
demand_by_stop = sqldf('Select TOP 10 ([start.station.name]||''||SUBSTRING([starttime], 12, 2)) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY ([start.station.name]||''||SUBSTRING([starttime], 12, 2)) ORDER BY 2 DESC')
# a. Top ride times for each station
demand_by_stop = sqldf('Select TOP 10 ([start.station.name]||SUBSTRING([starttime], 12, 2)) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY ([start.station.name]||SUBSTRING([starttime], 12, 2)) ORDER BY 2 DESC')
demand_by_stop = sqldf('Select ([start.station.name]||SUBSTRING([starttime], 12, 2)) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY ([start.station.name]||SUBSTRING([starttime], 12, 2)) LIMIT 10 ORDER BY 2 DESC')
# a. Top ride times for each station
demand_by_stop = sqldf('Select ([start.station.name]||SUBSTRING([starttime], 12, 2)) as Start_Hour, count([start.station.id]) as Demand FROM
bikesept GROUP BY ([start.station.name]||SUBSTRING([starttime], 12, 2))ORDER BY 2 DESC LIMIT 10')
demand_by_stop
